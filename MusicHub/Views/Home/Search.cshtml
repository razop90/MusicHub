@model MusicHub.Models.HomeViewModels.SearchModel
@using MusicHub.Classes;
@{
    ViewData["Title"] = "Search";

    var musicGenreList = Enum.GetValues(typeof(MusicGenre)).OfType<MusicGenre>().Select(m => new { Text = m.ToString(), Value = (int)m }).ToList();
    bool isLoggedIn = User.Identity.IsAuthenticated;
    bool IsAdmin = User.IsInRole(Consts.Admin);
}
<style>

    .btn-glyphicon {
        padding: 8px;
        background: #ffffff;
        margin-right: 4px;
    }

    .icon-btn {
        padding: 1px 15px 3px 2px;
        border-radius: 50px;
    }

    p {
        cursor: pointer;
    }

    a:hover {
        text-decoration-line: none;
    }

    .checkbox {
        height: 15px;
        width: 15px;
    }

    .checkbox_header {
        padding: 5px;
    }

        .checkbox_header label {
            color: black;
        }

    .container_field {
        width: auto;
        float: left;
        margin: 5px;
        border-radius: 5px;
        background-color: #cbdafa;
        padding: 5px 0px 0px 0px;
    }

        .container_field span {
            color: #00032d;
        }

    .inner_container {
        border-radius: 3px;
        height: 180px;
        padding: 10px;
        background-color: #dfe9ff;
    }

    /* The checkbox container */
    .container_cb {
        display: block;
        position: relative;
        padding-left: 35px;
        margin-bottom: 12px;
        cursor: pointer;
        font-size: 18px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        /* Hide the browser's default checkbox */
        .container_cb input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
        }

    /* Create a custom checkbox */
    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 21px;
        width: 21px;
        background-color: #d7d7d7;
    }

    /* On mouse-over, add a grey background color */
    .container:hover input ~ .checkmark {
        background-color: #bababa;
    }

    /* When the checkbox is checked, add a blue background */
    .container input:checked ~ .checkmark {
        background-color: #2196F3;
    }

    /* Create the checkmark/indicator (hidden when not checked) */
    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    /* Show the checkmark when checked */
    .container input:checked ~ .checkmark:after {
        display: block;
    }

    /* Style the checkmark/indicator */
    .container .checkmark:after {
        left: 9px;
        top: 5px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 3px 3px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
    }

    .small_checkbox {
        font-size: 15px;
        height: 20px;
    }
</style>
<h1>@ViewData["Title"]</h1>
<div class="container-fluid py-3 mt-3">
    <div class="row">
        <form asp-controller="Home" asp-action="Search" method="get" class="form-search form-inline">
            <div>
                <div class="container_field">
                    <div class="checkbox_header">
                        <label class="container_cb">
                            Songs
                            @Html.CheckBoxFor(model => model.IsBySong, new { @class = "checkbox" })
                            <span class="checkmark" for="checkbox-toggle"></span>
                        </label>
                    </div>
                    <div id="song_section" class="inner_container">
                        <label class="container_cb small_checkbox">
                            By Name
                            @Html.CheckBoxFor(model => model.IsBySongName, new { @class = "checkbox" })
                            <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                        </label>
                        <br />
                        <label class="container_cb small_checkbox">
                            By Genre
                            @Html.CheckBoxFor(model => model.IsBySongGenre, new { @class = "checkbox" })
                            <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                        </label>
                        @Html.DropDownListFor(model => model.Genre, new SelectList(musicGenreList, "Value", "Text", ""))
                        <br />
                        <br />
                        <label class="container_cb small_checkbox">
                            By Composer
                            @Html.CheckBoxFor(model => model.IsBySongComposer, new { @class = "checkbox" })
                            <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                        </label>
                    </div>
                </div>
                <div class="container_field">
                    <div class="checkbox_header">
                        <label class="container_cb">
                            Artists
                            @Html.CheckBoxFor(model => model.IsByArtist, new { @class = "checkbox" })
                            <span class="checkmark" for="checkbox-toggle"></span>
                        </label>
                    </div>
                    <div id="artist_section" class="inner_container">
                        <label class="container_cb small_checkbox">
                            By Name
                            @Html.CheckBoxFor(model => model.IsByArtistName, new { @class = "checkbox" })
                            <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                        </label>
                        <br />
                        <label class="container_cb small_checkbox">
                            By Last Name
                            @Html.CheckBoxFor(model => model.IsByArtistLastName, new { @class = "checkbox" })
                            <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                        </label>
                    </div>
                </div>
                @if (isLoggedIn) //Checking if there is a looged in user.
                {
                    <div class="container_field">
                        <div class="checkbox_header">
                            <label class="container_cb">
                                Playlists
                                @Html.CheckBoxFor(model => model.IsByPlaylist, new { @class = "checkbox" })
                                <span class="checkmark" for="checkbox-toggle"></span>
                            </label>
                        </div>
                        <div id="playlist_section" class="inner_container">
                            <label class="container_cb small_checkbox">
                                By Name
                                @Html.CheckBoxFor(model => model.IsByPlaylistName, new { @class = "checkbox" })
                                <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                            </label>
                            @if (IsAdmin)//Cecking if the current user is admin for more searching options.
                            {
                                <br />
                                <label class="container_cb small_checkbox">
                                    By All Users
                                    @Html.CheckBoxFor(model => model.IsByPlaylistAllUsers, new { @class = "checkbox" })
                                    <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                                </label>
                                <br />
                                <label class="container_cb small_checkbox">
                                    By User Name
                                    @Html.CheckBoxFor(model => model.IsByPlaylistUserName, new { @class = "checkbox" })
                                    <span class="checkmark small_checkbox" for="checkbox-toggle"></span>
                                </label>
                                @Html.EditorFor(model => model.UserName, new { @placeholder = "Yype a user name" })
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="input-group pull-right" style="width:40%;">
                <label>Free Text</label>
                <div>
                    <input id="search_text" name="searchText" type="text" class="form-control search-query" style="min-width:300px;" placeholder="Search..." />
                </div>
                <br />
                <br />
                <br />
                <button class="btn btn-primary" style="font-size:15px;vertical-align:bottom; bottom:0px;"><i class="glyphicon glyphicon-search"> Search</i></button>
            </div>
        </form>
    </div>
</div>
<div id="refTable">
    @Html.Partial("_Partial_Search_Table", Model)
</div>
@section Scripts
    {
    <script>
        //NOTE: the registration process is made several times, again and again, because
        //when the partial view updates with the new data, the previous registration
        //is removed so we need to register again in order to apply our sorting actions.

        @*$(document).ready(function () {
            $("#search_text").keyup(function () {
                $.ajax({
                    url: "/Home/TypeSearch",
                    type: "GET",
                    data: { "model": @Model,"searchString": $("#search_text").val() }
                })
                    .done(function (partialViewResult) {
                        $("#refTable").html(partialViewResult);
                    });
            })
        })*@


    </script>

    <script>
                                                                               //$(function () {
                                                                               //    $("#IsBySong").click(function () {
                                                                               //        if ($(this).is(':checked')) {
                                                                               //            $('#song_section :input').removeAttr('disabled');
                                                                               //        }
                                                                               //        else {
                                                                               //            $('#song_section :input').attr('disabled', true);
                                                                               //        }
                                                                               //    });
                                                                               //});

                                                                               //$(function () {
                                                                               //    $("#IsByArtist").click(function () {
                                                                               //        if ($(this).is(':checked')) {
                                                                               //            $('#artist_section :input').removeAttr('disabled');
                                                                               //        }
                                                                               //        else {
                                                                               //            $('#artist_section :input').attr('disabled', true);
                                                                               //        }
                                                                               //    });
                                                                               //});

                                                                               //$('#playlist_section :input').attr('disabled', true);
                                                                               //$(function () {
                                                                               //    $("#IsByPlaylist").click(function () {
                                                                               //        if ($(this).is(':checked')) {
                                                                               //            $('#playlist_section :input').removeAttr('disabled');
                                                                               //        }
                                                                               //        else {
                                                                               //            $('#playlist_section :input').attr('disabled', true);
                                                                               //        }
                                                                               //    });
                                                                               //});
    </script>
}
