@model MusicHub.Models.HomeViewModels.IndexViewModel

@using MusicHub.Classes;
@using Newtonsoft.Json;
@{
    ViewData["Title"] = "Home Page";
    var IsLoggedIn = User.Identity.IsAuthenticated;
}

<style>
    .highlight-title {
        font-size: 25px;
        color: darkcyan;
        line-height: 1;
        text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;
        text-align: center;
    }

    .highlight-body b {
        font-size: 14px;
        color: white;
    }

    .highlight-body a {
        font-size: 14px;
        color: #289dcc;
    }

        .highlight-body a:hover {
            color: #48b9e7;
            text-decoration-line: none;
        }

    .highlight-button {
        background-color: #d51000;
        border: none;
        color: white;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        font-size: 14px;
        margin: 4px 2px;
        cursor: pointer;
        vertical-align: bottom;
        border-radius: 2px;
        margin: 0 auto;
        display: inline-block;
    }

        .highlight-button:hover {
            background-color: #de3d2f;
            color: white;
            text-decoration-line: none;
        }

    /*layout*/
    #main-wrap {
        overflow: hidden;
        background-color: #010030;
    }

    #carousel-caption {
        vertical-align: bottom;
        margin-bottom: -10px;
    }

    .highlight-wrapper {
        width: 100%;
    }

        .highlight-wrapper:before, .highlight-wrapper:after {
            content: '';
            width: 100%;
            height: 200px;
            position: absolute;
            bottom: 0;
            background: rgba(0, 0, 0, 0.3);
        }

        .highlight-wrapper:before {
            left: 0;
        }

        .highlight-wrapper:after {
            right: 0;
        }


    #aside-right {
        width: auto;
        display: table-cell;
    }

    #aside-left {
        width: 30%;
        display: table-cell;
        vertical-align: top;
        padding: 0 15px 0 0;
    }

    .widget-title {
        border-bottom: 2px solid #289dcc;
        font-size: 18px;
        margin-bottom: 15px;
        padding-bottom: 0;
    }

        .widget-title span {
            background-color: #289dcc;
            color: #fff;
            padding: 6px 12px;
            display: inline-block;
        }

    .container1 {
        width: 800px;
        overflow-x: scroll;
        white-space: nowrap;
    }

    .column {
        display: inline-block;
        width: 200px;
    }

    .single-article {
        background-color: #f7f7f7;
        box-shadow: 0.3px 0.3px #888888;
        border-style: ridge;
        border-color: rgba(233, 233, 233, 0.47);
        margin: 5px;
        width: 48%;
        display: inline-block;
    }

    .article-content {
        padding: 5px;
    }

    .entry-title {
        font-size: 14px;
    }

    .article_container {
        margin: 5px 0 0 0;
        max-height: 1070px;
        overflow-y: auto;
    }

    .cat-links {
        background-color: #289dcc;
        border-radius: 3px;
        color: #ffffff;
        font-size: 12px;
        padding: 3px 10px;
        overflow: hidden;
    }

        .cat-links a {
            color: white;
            overflow: hidden;
        }

            .cat-links a:hover {
                color: white;
                text-decoration-line: none;
            }

    .entry-title {
        font-size: 22px;
        -webkit-text-size-adjust: auto;
        width: 80%;
        overflow: hidden;
        height: 55px;
    }

        .entry-title a {
            color: #232323;
            text-shadow: none;
            word-wrap: break-word;
            overflow: hidden;
        }

            .entry-title a:hover {
                color: #289dcc;
                text-decoration-line: none;
            }

    .entry-content a:hover {
        color: #289dcc;
        text-decoration-line: none;
    }

    .featured-image img {
        width: 100%;
    }

    #barChart {
        font-size: 10px;
    }

    .bar {
        fill: steelblue;
    }

        .bar:hover {
            fill: #3ab3e3;
        }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
    }

    .x.axis path {
        display: none;
    }

    .top_margin {
        margin-top: 70px;
    }

    .news-wrapper img {
        width: 94px;
        height: 74px;
        border: 2px solid #e5e7e8;
    }
</style>

<head>
    <meta name="viewport" content="width=device-width">
    <script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
</head>

<div>
    <aside id="aside-left">
        <h3 class="widget-title">
            <span>Search</span>
        </h3>

        @*Search bar*@
        <form asp-controller="Home" asp-action="Search" method="get" class="form-search form-inline">

            <div class="input-group pull-left" style="width:100%;">
                <input name="searchText" type="text" class="form-control search-query" placeholder="Songs or Artists" />
                <span class="input-group-btn">
                    <button type="submit" class="btn btn-primary"><i class="glyphicon glyphicon-search"></i></button>
                </span>
            </div>
        </form>

        @*Statistics section*@
        <div class="top_margin">
            <h3 class="widget-title">
                <span>Website Genres</span>
            </h3>
            @*Genres graph*@
            <span>Songs Count By Genres</span>
            @*SVG:Scalable Vector Graphics element. This SVG is used to draw the chart*@
            <svg id="genreBarChart"></svg>

            @if (IsLoggedIn)//Checling if the user is logged in.
            {
                <h3 class="widget-title">
                    <span>User's Genres</span>
                </h3>
                @*Playlist Genres graph*@
                <span>Songs Count By Genres</span>
                @*SVG:Scalable Vector Graphics element. This SVG is used to draw the chart*@
                <svg id="playlistBarChart"></svg>
            }
        </div>

        <!-- News stories -->
        <div class="news-wrapper">
            <h3 class="widget-title">
                <span>Music News</span>
            </h3>
            <div class="panel panel-info">
                <div class="panel-heading">
                    MTV Top New Stories
                </div>
                <ul class="media-list">
                    @{
                        //Settinng max articles to be displayed.
                        var maxArticles = Model.NewsArticles.Count > Consts.ArticlesToDisplay ? Consts.ArticlesToDisplay : Model.NewsArticles.Count;
                        //If the user isn't logged in - setting the max articles display to by the maximum.
                        if (!IsLoggedIn&& Model.NewsArticles.Count> Consts.ArticlesToDisplay)
                        {
                            maxArticles = Model.NewsArticles.Count;
                        }

                        for (int i = 0; i < maxArticles; i++)
                        {
                            var article = Model.NewsArticles[i];

                            <li class="media">
                                <img src="@article.ImageURL" alt="" class="img-circle pull-left">

                                <div class="media-body">
                                    <span class="text-muted pull-right">
                                        <small class="text-muted">@article.PublishDate</small>
                                    </span>
                                    <a href="@article.URL">
                                        <strong class="text-success">@article.Title</strong>
                                    </a>
                                    <p>
                                        @article.Description
                                    </p>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    </aside>
    @if (Model.Highlights != null)
    {
        //Count of highlights to display.
        //If there are at least 'Consts.HighlightsToDisplay' highlights - takes them, if not - takes all what we've got.
        var count = Model.Highlights.Count >= @Consts.HighlightsToDisplay ? @Consts.HighlightsToDisplay : Model.Highlights.Count;

        <aside id="aside-right">
            <div id="myCarousel" class="carousel slide" data-ride="carousel" data-interval="6000">
                @*checking if there are highlights*@

                <div>
                    <ol class="carousel-indicators">
                        @*looping on all highlights and add bolets for each item for the home page songs-display control
                            set the first item to be the active one (the first focused item)*@
                        @for (int i = 0; i < count; i++)
                        {
                            if (i == 0)
                            {
                                <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                            }
                            else
                            {
                                <li data-target="#myCarousel" data-slide-to="@i"></li>
                            }
                        }
                    </ol>
                    <div class="carousel-inner" role="listbox">
                        @{
                            //looping on all highligts and add their data in a listbox
                            //set the first item to be the active one (the first focused item)
                            for (int i = 0; i < count; i++)
                            {
                                var highlight = Model.Highlights[i];
                                string cla = i == 0 ? "item active" : "item";

                                <div id="main-wrap" class="@cla">
                                    <img id="image" src="http://img.youtube.com/vi/@highlight.YoutubeId/maxresdefault.jpg" class="img-responsive" />

                                    <div class="highlight-wrapper">
                                        <section class="carousel-caption" role="option">
                                            <h1 class="highlight-title">
                                                <br>@highlight.SongName
                                            </h1>

                                            <span class="highlight-body">
                                                <b>by</b>
                                                <a asp-controller="Artist" asp-action="Details" asp-route-id="@highlight.ArtistID">@highlight.ArtistName</a>
                                                <br />
                                                <br />
                                            </span>

                                            <a class="highlight-button" asp-controller="Song" asp-action="Details" asp-route-id="@highlight.SongID">@highlight.ButtonContent</a>

                                            @*empty space*@
                                            <br />
                                            <br />
                                        </section>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
                <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
            <div class="article_container">
                @for (int i = count; i < Model.Highlights.Count; i++)
                {
                    var highlight = Model.Highlights[i];

                    <article class="single-article">
                        <div>
                            <a class="featured-image" asp-controller="Song" asp-action="Details" asp-route-id="@highlight.SongID"><img src="http://img.youtube.com/vi/@highlight.YoutubeId/mqdefault.jpg" alt="" scale="0"></a>
                        </div>

                        <div class="article-content clearfix">
                            <div>
                                <span class="cat-links">
                                    <a>@highlight.Genre</a>
                                </span>
                            </div>
                            <header>
                                <h2 class="entry-title">
                                    <a asp-controller="Song" asp-action="Details" asp-route-id="@highlight.SongID">@highlight.SongName</a>
                                </h2>
                            </header>

                            <span class="entry-content">
                                <b>by</b>
                                <a asp-controller="Artist" asp-action="Details" asp-route-id="@highlight.ArtistID">@highlight.ArtistName</a>
                            </span>
                        </div>
                    </article>
                }
            </div>
        </aside>
    }
</div>

@*Genre Data Script*@
<script>
    var genre_data = @Html.Raw(JsonConvert.SerializeObject(Model.GenreData));
    var playlists_data = @Html.Raw(JsonConvert.SerializeObject(Model.PlaylistsData));

    applyGraphData(genre_data, "svg#genreBarChart");
    applyGraphData(playlists_data, "svg#playlistBarChart");

    function applyGraphData(data,field_id) {
        var margin = {
            top: 20,
            right: 20,
            bottom: 50,
            left: 40
        },
            width = 300 - margin.left - margin.right,
            height = 300 - margin.top - margin.bottom;


        var x = d3.scale.ordinal()
            .rangeRoundBands([width, 0], 0.1);

        var y = d3.scale.linear()
            .range([0, height]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .tickFormat(d3.format("d"))
            .tickSubdivide(0);


        var svg = d3.select(field_id)
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom + 50)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        x.domain(data.map(function (d) { return d.Title; }));

        y.domain([d3.max(data, function (d) {
            return d.Count;
        }), 0]);

        //g : Title attributes.
        svg.append("g")
            .attr("class", "y axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis)
            .selectAll("text")
            .attr("transform", "rotate(90)")
            .attr("x", 5)
            .attr("y", -4)
            .attr("dx", ".6em")
            .style("text-anchor", "start");

        svg.append("g")
            .attr("class", "y axis")
            .call(yAxis);

        svg.selectAll(".bar")
            .data(data)
            .enter().append("rect")
            .attr("class", "bar")

            .attr("x", function (d) {
                return x(d.Title);
            })
            .attr("width", x.rangeBand())
            .attr("y", function (d) {
                return y(d.Count);
            })
            .attr("height", function (d) {
                return height - y(d.Count);
            });
    }
</script>


